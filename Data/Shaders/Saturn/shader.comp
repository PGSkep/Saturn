#version 450

#extension GL_ARB_separate_shader_objects : enable
#extension GL_ARB_shading_language_420pack : enable

struct Instance
{
	vec3 position;
	float colorX;
	float colorY;
	float colorZ;
	float scale;
	float eulerX;
	float eulerY;
	float eulerZ;
	float padding1;
	float padding2;
};

struct Speed
{
	vec3 speed;
	float padding;
};

layout (set = 0, binding = 0) uniform UBO 
{
	float deltaTime;
	float gravity;
} constants;

layout (std140, set = 0, binding = 1) buffer STO1
{
	Instance instance[ ];
} instance;

layout (std140, set = 0, binding = 2) buffer STO2
{
	Speed speed[ ];
} properties;

vec3 CalculateGravityForce(vec3 _bodyPosition, vec3 _sourcePosition, float _sourceGravity)
{
	float distance = sqrt(
		((_sourcePosition.x - _bodyPosition.x) * (_sourcePosition.x - _bodyPosition.x)) +
		((_sourcePosition.y - _bodyPosition.y) * (_sourcePosition.y - _bodyPosition.y)) +
		((_sourcePosition.z - _bodyPosition.z) * (_sourcePosition.z - _bodyPosition.z)));
	float gravityForce = _sourceGravity / (distance * distance);
	vec3 gravityDirection = normalize(_sourcePosition - _bodyPosition);

	return gravityDirection * gravityForce;
}

void main()
{
	uint index = gl_GlobalInvocationID.x + 2;
	
	int sourceCount = 1;
	vec3 gravitySources[1];
	gravitySources[0] = vec3(0,0,0);
	
	vec3 bodyPosition = vec3(instance.instance[index].position);
	
	vec3 stuff = vec3(0, 0, 0);
	for (int i = 0; i != sourceCount; ++i)
	{
		stuff += CalculateGravityForce(bodyPosition, gravitySources[i], constants.gravity);
	}
	
	properties.speed[index].speed += stuff * constants.deltaTime;

	instance.instance[index].position += properties.speed[index].speed * constants.deltaTime;
}
